# Depth-First Search, 깊이 우선 탐색

#인접 행렬(Adjacency Matrix): 2차원 배열로 그래프의 연결 관계를 표현하는 방식
#인접 리스트(Adjacency List): 리스트로 그래프의 연결 관계를 표현하는 방식

INF = 999999999 #무한의 비용 선언

#2차원 리스트를 이용해 인접 행렬 표현
graph = [
    [0,7,5],
    [7,0,INF],
    [5,INF,0]
]
print(graph)

#인접 리스트 방식 예제
#행(Row)이 3개인 2차원 리스트로 인접 리스트 표현
graph = [[] for _ in range(3)]

#노드 0에 연결된 노드 정보 저장(노드,거리)
graph[0].append((1,7))
graph[0].append((2,5))

#노드 1에 연결된 노드 정보 저장(노드,거리)
graph[1].append((0,7))

#노드 2에 연결된 노드 정보 저장(노드,거리)
graph[2].append((0,5))

print(graph)

# 메모리 측면에서 보면 인접행렬방식은 모든 관계를 저장하므로 노드 개수가 많을수록 메모리가 낭비됨
# 인접리스트 방식은 연결된 정보만을 저장하기 때문에 효율적
# 대신 입접리스트는 두 노드간의 연결 확인이 느림
# 
# 특정한 노드와 연결된 모든 인접 노드를 순회하는 경우,,,,,, 인접리스트방식이 메모리 공간 낭비가 적음
# #